<?php return array (
  'unique_key' => 'name',
  'preserve_keys' => false,
  'update_object' => true,
  'namespace' => 'dateago',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"dateago-1.0.4-pl\\/modSnippet\\/9fd3dca4a7ffa99018377845d4bb2134\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"dateago"}',
    ),
    1 => 
    array (
      'type' => 'file',
      'body' => '{"source":"dateago-1.0.4-pl\\/modSnippet\\/9fd3dca4a7ffa99018377845d4bb2134\\/1\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"dateago"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => 'ab9925730664ecab12876b3510fe521f',
  'package' => 'modx',
  'class' => 'modSnippet',
  'signature' => '9fd3dca4a7ffa99018377845d4bb2134',
  'native_key' => 0,
  'object' => '{"id":0,"source":1,"property_preprocess":0,"name":"dateAgo","description":"","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/**\\n * Formats date to \\"10 minutes ago\\" or \\"Yesterday in 22:10\\"\\n * This algorithm taken from https:\\/\\/github.com\\/livestreet\\/livestreet\\/blob\\/7a6039b21c326acf03c956772325e1398801c5fe\\/engine\\/modules\\/viewer\\/plugs\\/function.date_format.php\\n *\\n * @var array $scriptProperties\\n * @var string $input Date to format\\n *\\/\\nif (empty($input)) {\\n    return false;\\n}\\nif (!empty($options) && $options = $modx->fromJSON($options)) {\\n    $scriptProperties = array_merge($scriptProperties, $options);\\n}\\n\\nrequire_once(MODX_CORE_PATH . \'components\\/dateago\\/include\\/declension.php\');\\n$modx->lexicon->load(\'dateago:default\');\\n\\n$date = preg_match(\'\\/^\\\\d+$\\/\', $input)\\n    ? $input\\n    : strtotime($input);\\n$current = !empty($scriptProperties[\'current\'])\\n    ? $scriptProperties[\'current\']\\n    : time();\\n$dateFormat = $scriptProperties[\'dateFormat\'];\\n$delta = $current - $date;\\n\\nif (!empty($scriptProperties[\'dateNow\']) && $delta > 0) {\\n    if ($delta < $scriptProperties[\'dateNow\']) {\\n        return $modx->lexicon(\'da_now\');\\n    }\\n}\\n\\nif (!empty($scriptProperties[\'dateMinutes\']) && $delta > 0) {\\n    $minutes = round(($delta) \\/ 60);\\n    if ($minutes < $scriptProperties[\'dateMinutes\']) {\\n        if ($minutes > 0) {\\n            return declension($minutes, $modx->lexicon(\'da_minutes\', array(\'minutes\' => $minutes)));\\n        } else {\\n            return $modx->lexicon(\'da_minutes_less\');\\n        }\\n    }\\n}\\n\\nif (!empty($scriptProperties[\'dateHours\']) && $delta > 0) {\\n    $hours = round(($delta) \\/ 3600);\\n    if ($hours < $scriptProperties[\'dateHours\']) {\\n        if ($hours > 0) {\\n            return declension($hours, $modx->lexicon(\'da_hours\', array(\'hours\' => $hours)));\\n        } else {\\n            return $modx->lexicon(\'da_hours_less\');\\n        }\\n    }\\n}\\n\\nif (!empty($scriptProperties[\'dateDay\']) && $delta > 0) {\\n    switch (date(\'Y-m-d\', $date)) {\\n        case date(\'Y-m-d\'):\\n            $day = $modx->lexicon(\'da_today\');\\n            break;\\n        case date(\'Y-m-d\', mktime(0, 0, 0, date(\'m\'), date(\'d\') - 1, date(\'Y\'))):\\n            $day = $modx->lexicon(\'da_yesterday\');\\n            break;\\n        case date(\'Y-m-d\', mktime(0, 0, 0, date(\'m\'), date(\'d\') + 1, date(\'Y\'))):\\n            $day = $modx->lexicon(\'da_tomorrow\');\\n            break;\\n        default:\\n            $day = null;\\n    }\\n    if ($day) {\\n        $format = str_replace(\\"day\\", preg_replace(\\"#(\\\\w{1})#\\", \'\\\\\\\\\\\\${1}\', $day), $scriptProperties[\'dateDay\']);\\n\\n        return date($format, $date);\\n    }\\n}\\n\\n$month_arr = $modx->fromJSON($modx->lexicon(\'da_months\'));\\n$m = date(\\"n\\", $date);\\n$month = $month_arr[$m - 1];\\n\\n$format = preg_replace(\\"~(?<!\\\\\\\\\\\\\\\\)F~U\\", preg_replace(\'~(\\\\w{1})~u\', \'\\\\\\\\\\\\${1}\', $month), $dateFormat);\\n\\nreturn date($format, $date);","locked":0,"properties":"a:6:{s:5:\\"input\\";a:7:{s:4:\\"name\\";s:5:\\"input\\";s:4:\\"desc\\";s:8:\\"da_input\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:0:\\"\\";s:7:\\"lexicon\\";s:18:\\"dateago:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:10:\\"dateFormat\\";a:7:{s:4:\\"name\\";s:10:\\"dateFormat\\";s:4:\\"desc\\";s:13:\\"da_dateFormat\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:10:\\"d F Y, H:i\\";s:7:\\"lexicon\\";s:18:\\"dateago:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"dateNow\\";a:7:{s:4:\\"name\\";s:7:\\"dateNow\\";s:4:\\"desc\\";s:10:\\"da_dateNow\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";i:10;s:7:\\"lexicon\\";s:18:\\"dateago:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:7:\\"dateDay\\";a:7:{s:4:\\"name\\";s:7:\\"dateDay\\";s:4:\\"desc\\";s:10:\\"da_dateDay\\";s:4:\\"type\\";s:9:\\"textfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:7:\\"day H:i\\";s:7:\\"lexicon\\";s:18:\\"dateago:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:11:\\"dateMinutes\\";a:7:{s:4:\\"name\\";s:11:\\"dateMinutes\\";s:4:\\"desc\\";s:14:\\"da_dateMinutes\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:2:\\"59\\";s:7:\\"lexicon\\";s:18:\\"dateago:properties\\";s:4:\\"area\\";s:0:\\"\\";}s:9:\\"dateHours\\";a:7:{s:4:\\"name\\";s:9:\\"dateHours\\";s:4:\\"desc\\";s:12:\\"da_dateHours\\";s:4:\\"type\\";s:11:\\"numberfield\\";s:7:\\"options\\";a:0:{}s:5:\\"value\\";s:2:\\"10\\";s:7:\\"lexicon\\";s:18:\\"dateago:properties\\";s:4:\\"area\\";s:0:\\"\\";}}","moduleguid":"","static":0,"static_file":"core\\/components\\/dateago\\/elements\\/snippets\\/snippet.dateago.php","content":"\\/**\\n * Formats date to \\"10 minutes ago\\" or \\"Yesterday in 22:10\\"\\n * This algorithm taken from https:\\/\\/github.com\\/livestreet\\/livestreet\\/blob\\/7a6039b21c326acf03c956772325e1398801c5fe\\/engine\\/modules\\/viewer\\/plugs\\/function.date_format.php\\n *\\n * @var array $scriptProperties\\n * @var string $input Date to format\\n *\\/\\nif (empty($input)) {\\n    return false;\\n}\\nif (!empty($options) && $options = $modx->fromJSON($options)) {\\n    $scriptProperties = array_merge($scriptProperties, $options);\\n}\\n\\nrequire_once(MODX_CORE_PATH . \'components\\/dateago\\/include\\/declension.php\');\\n$modx->lexicon->load(\'dateago:default\');\\n\\n$date = preg_match(\'\\/^\\\\d+$\\/\', $input)\\n    ? $input\\n    : strtotime($input);\\n$current = !empty($scriptProperties[\'current\'])\\n    ? $scriptProperties[\'current\']\\n    : time();\\n$dateFormat = $scriptProperties[\'dateFormat\'];\\n$delta = $current - $date;\\n\\nif (!empty($scriptProperties[\'dateNow\']) && $delta > 0) {\\n    if ($delta < $scriptProperties[\'dateNow\']) {\\n        return $modx->lexicon(\'da_now\');\\n    }\\n}\\n\\nif (!empty($scriptProperties[\'dateMinutes\']) && $delta > 0) {\\n    $minutes = round(($delta) \\/ 60);\\n    if ($minutes < $scriptProperties[\'dateMinutes\']) {\\n        if ($minutes > 0) {\\n            return declension($minutes, $modx->lexicon(\'da_minutes\', array(\'minutes\' => $minutes)));\\n        } else {\\n            return $modx->lexicon(\'da_minutes_less\');\\n        }\\n    }\\n}\\n\\nif (!empty($scriptProperties[\'dateHours\']) && $delta > 0) {\\n    $hours = round(($delta) \\/ 3600);\\n    if ($hours < $scriptProperties[\'dateHours\']) {\\n        if ($hours > 0) {\\n            return declension($hours, $modx->lexicon(\'da_hours\', array(\'hours\' => $hours)));\\n        } else {\\n            return $modx->lexicon(\'da_hours_less\');\\n        }\\n    }\\n}\\n\\nif (!empty($scriptProperties[\'dateDay\']) && $delta > 0) {\\n    switch (date(\'Y-m-d\', $date)) {\\n        case date(\'Y-m-d\'):\\n            $day = $modx->lexicon(\'da_today\');\\n            break;\\n        case date(\'Y-m-d\', mktime(0, 0, 0, date(\'m\'), date(\'d\') - 1, date(\'Y\'))):\\n            $day = $modx->lexicon(\'da_yesterday\');\\n            break;\\n        case date(\'Y-m-d\', mktime(0, 0, 0, date(\'m\'), date(\'d\') + 1, date(\'Y\'))):\\n            $day = $modx->lexicon(\'da_tomorrow\');\\n            break;\\n        default:\\n            $day = null;\\n    }\\n    if ($day) {\\n        $format = str_replace(\\"day\\", preg_replace(\\"#(\\\\w{1})#\\", \'\\\\\\\\\\\\${1}\', $day), $scriptProperties[\'dateDay\']);\\n\\n        return date($format, $date);\\n    }\\n}\\n\\n$month_arr = $modx->fromJSON($modx->lexicon(\'da_months\'));\\n$m = date(\\"n\\", $date);\\n$month = $month_arr[$m - 1];\\n\\n$format = preg_replace(\\"~(?<!\\\\\\\\\\\\\\\\)F~U\\", preg_replace(\'~(\\\\w{1})~u\', \'\\\\\\\\\\\\${1}\', $month), $dateFormat);\\n\\nreturn date($format, $date);"}',
);